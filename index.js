const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const base = require("./const");

const bot = new Telegraf(process.env.BOT_TOKEN);

//======= START =======//
bot.start(async (ctx) => {
	try {
		await ctx.deleteMessage();
		if (base.status === false) {
			return ctx.replyWithHTML(base.textWelcome, {
				reply_markup: {
					keyboard: [[{ text: "üéâ  –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π" }], [{ text: "üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏" }], [{ text: "üßß  –ß–∞–π–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞" }]],
					resize_keyboard: true,
				},
			});
		} else {
			if (ctx.from.id !== 558982454) {
				return ctx.replyWithHTML("–í–∏–±–∞—á—Ç–µ, –±–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–µ–¥—É—Ç—å—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏.");
			} else {
				return ctx.replyWithHTML(base.textWelcome, {
					reply_markup: {
						keyboard: [[{ text: "üéâ  –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π" }], [{ text: "üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏" }], [{ text: "üßß  –ß–∞–π–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞" }]],
						resize_keyboard: true,
					},
				});
			}
		}
	} catch (e) {
		console.error(e);
	}
});

bot.hears("üéâ  –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π", async (ctx) => {
	try {
		return ctx.replyWithHTML("–§—ñ–ª—å—Ç—Ä –ø–æ–¥—ñ–π –ø–æ:", {
			reply_markup: {
				keyboard: [[{ text: "üìÖ  –î–Ω—è–º" }, { text: "‚ú®  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è–º" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});
bot.hears("üìÖ  –î–Ω—è–º", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ü–æ–¥—ñ—ó —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è:", {
			reply_markup: {
				keyboard: [[{ text: "–í–¢" }, { text: "–°–†" }, { text: "–ß–¢" }, { text: "–ù–î" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});
bot.hears("‚ú®  –ö–∞—Ç–µ–≥–æ—Ä—ñ—è–º", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:", {
			reply_markup: {
				keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "üçÉ  –ß–∞–π" }], [{ text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }, { text: "üìΩÔ∏è  –ö—ñ–Ω–æ—á–∞–π" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});
// bot.hears("üçÉ  –ß–∞–π", async (ctx) => {
// 	try {
// 		return ctx.replyWithHTML("–ß–∞–π–Ω—ñ —ñ–≤–µ–Ω—Ç–∏:", {
// 			reply_markup: {
// 				keyboard: [[{ text: "üçµ  –ß–∞—é–≤–∞–Ω–Ω—è –ø–æ –¥–æ–º–∞—à–Ω—å–æ–º—É" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
// 				resize_keyboard: true,
// 			},
// 		});
// 	} catch (e) {
// 		console.error(e);
// 	}
// });

base.events.forEach((event) => {
	eventButtonAction(event.name, event.photo, event.text, event.master);
});

base.days.forEach((day) => {
	bot.hears(day, async (ctx) => {
		try {
			if (day === "–í–¢") {
				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –≤—ñ–≤—Ç–æ—Ä–∫–∞:", {
					reply_markup: {
						keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
						resize_keyboard: true,
					},
				});
			}

			if (day === "–°–†") {
				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó —Å–µ—Ä–µ–¥–∏:", {
					reply_markup: {
						keyboard: [[{ text: "üìΩÔ∏è  –ö—ñ–Ω–æ—á–∞–π" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
						resize_keyboard: true,
					},
				});
			}

			if (day === "–ß–¢") {
				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –ß–µ—Ç–≤–µ—Ä–≥–∞:", {
					reply_markup: {
						keyboard: [[{ text: "üßò  –ô–æ–≥–∞" }, { text: "‚òØÔ∏è  –¶—ñ–≥—É–Ω" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
						resize_keyboard: true,
					},
				});
			}

			// if (day === "–°–ë") {
			// 	return ctx.replyWithHTML("–ü–æ–¥—ñ—ó —Å—É–±–æ—Ç–∏:", {
			// 		reply_markup: {
			// 			keyboard: [[{ text: "–¢–µ–ø–ª–∏–π Indoor Live Love Festival" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
			// 			resize_keyboard: true,
			// 		},
			// 	});
			// }

			if (day === "–ù–î") {
				return ctx.replyWithHTML("–ü–æ–¥—ñ—ó –Ω–µ–¥—ñ–ª—ñ:", {
					reply_markup: {
						keyboard: [[{ text: "üçµ  –ß–∞—é–≤–∞–Ω–Ω—è –ø–æ –¥–æ–º–∞—à–Ω—å–æ–º—É" }], [{ text: "üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É" }]],
						resize_keyboard: true,
					},
				});
			}
		} catch (e) {
			console.error(e);
		}
	});
});

//======= FUNCTIONS =======//
function eventButtonAction(name, src, text, master) {
	bot.hears(name, async (ctx) => {
		try {
			if (src !== false) {
				return ctx.replyWithPhoto(
					{
						source: src,
					},
					{
						parse_mode: "HTML",
						caption: text,
						reply_markup: {
							inline_keyboard: [[Markup.button.url("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", master)]],
						},
					}
				);
			} else {
				return ctx.replyWithHTML(text);
			}
		} catch (e) {
			console.error(e);
		}
	});
}

bot.hears("üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏", async (ctx) => {
	try {
		return ctx.replyWithHTML("<b>–ê–Ω–Ω–∞ –ü–∞–Ω—ñ–Ω–∞</b> - –º–∞–º–∞ —Å–ø–µ–π—Å—É, —Ç–∞ –Ω–∞—à –≤–∏–∫–ª–∞–¥–∞—á –∑ –π–æ–≥–∏.", Markup.inlineKeyboard([[Markup.button.url("–ó–≤'—è–∑–∞—Ç–∏—Å—è", "t.me/annaliveloveyoga")]]));
	} catch (e) {
		console.error(e);
	}
});
bot.hears("üè†  –ù–∞ –≥–æ–ª–æ–≤–Ω—É", async (ctx) => {
	try {
		return ctx.replyWithHTML("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
			reply_markup: {
				keyboard: [[{ text: "üéâ  –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π" }], [{ text: "üíå  –ö–æ–Ω—Ç–∞–∫—Ç–∏" }], [{ text: "üßß  –ß–∞–π–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞" }]],
				resize_keyboard: true,
			},
		});
	} catch (e) {
		console.error(e);
	}
});
bot.hears(["üßß  –ß–∞–π–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"], async (ctx) => {
	try {
		return ctx.replyWithPhoto(
			{
				source: base.teaSend.src,
			},
			{
				caption: base.teaSend.text,
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [[Markup.button.url("–û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—Ä–µ–¥–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "t.me/original_amet")]],
					resize_keyboard: true,
				},
			}
		);
	} catch (e) {
		console.error(e);
	}
});

bot.launch();
